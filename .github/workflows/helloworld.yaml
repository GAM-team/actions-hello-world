name: GitHub Actions Hello World

on: [push, pull_request]

defaults:
  run:
    shell: bash
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
            mid: 0
          - os: ubuntu-20.04
            mid: 1
          - os: ubuntu-18.04
            mid: 2
            python: "3.6"
          - os: ubuntu-18.04
            mid: 3
            python: "3.7"
          - os: ubuntu-18.04
            mid: 4
            python: "3.8"
          - os: ubuntu-18.04
            mid: 5
            python: "3.9"
          - os: ubuntu-20.04
            mid: 6
            python: "3.6"
          - os: ubuntu-20.04
            mid: 7
            python: "3.7"
          - os: ubuntu-20.04
            mid: 8
            python: "3.8"
          - os: ubuntu-20.04
            mid: 9
            python: "3.9"

    steps:

      - uses: actions/checkout@master
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Cache Python build
        id: cache-python
        uses: actions/cache@v2
        if: matrix.python == ''
        with:
          path: |
            ~/python
            ~/ssl
          key: ${{ matrix.os }}-${{ matrix.mid }}-20211006

      - name: Use pre-compiled Python where specified
        if: matrix.python != ''
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Set PYTHON and PIP variables for pre-installed Python
        if: matrix.python != ''
        run: |
          echo "PYTHON=python3" >> $GITHUB_ENV
          echo "PIP=pip3" >> $GITHUB_ENV

      - name: Set compiled Python/SSL env variables
        if: matrix.python == ''
        run: |
          OPENSSL_INSTALL_DIR=~/ssl
          PYTHON_INSTALL_DIR=~/python
          echo "OPENSSL_INSTALL_DIR=${OPENSSL_INSTALL_DIR}" >> $GITHUB_ENV
          echo "PYTHON_INSTALL_DIR=${PYTHON_INSTALL_DIR}" >> $GITHUB_ENV
          echo "PATH=$PYTHON_INSTALL_DIR/bin:$OPENSSL_INSTALL_DIR/bin:${PATH}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${OPENSSL_INSTALL_DIR}/lib:${HOME}/python/lib" >> $GITHUB_ENV
          
      - name: Download OpenSSL
        if: matrix.python == '' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          url="https://www.openssl.org/source/openssl-1.1.1l.tar.gz"
          echo "Downloading ${url}..."
          curl -o openssl.tar.gz -s "${url}"

      - name: Extracting OpenSSL
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          tar xf openssl.tar.gz
          mv openssl-*/ openssl/

      - name: Config OpenSSL
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd ~
          mkdir "${OPENSSL_INSTALL_DIR}"
          mkdir "${PYTHON_INSTALL_DIR}"
          OPENSSL_SOURCE_DIR=~/openssl
          cd $OPENSSL_SOURCE_DIR
          echo "OPENSSL_SOURCE_DIR=${OPENSSL_SOURCE_DIR}" >> $GITHUB_ENV
          ./config shared --prefix="${OPENSSL_INSTALL_DIR}"

      - name: Make OpenSSL
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          make

      - name: Install OpenSSL
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          make install

      - name: Run OpenSSL
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          "${OPENSSL_INSTALL_DIR}/bin/openssl" version

      - name: Download Python
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          git clone https://github.com/python/cpython.git
          cd cpython
          git checkout v3.9.7
          PYTHON_SOURCE_DIR=$(pwd)
          echo "PYTHON_SOURCE_DIR=${PYTHON_SOURCE_DIR}" >> $GITHUB_ENV

      - name: Configure Python
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          ./configure --with-openssl-rpath=auto \
                      --with-openssl="${OPENSSL_INSTALL_DIR}" \
                      --enable-shared \
                      --prefix="${PYTHON_INSTALL_DIR}" \
                      --with-ensurepip=upgrade \
                      --enable-optimizations \
                      --with-lto

      - name: Build Python
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          make
          
      - name: Install Python
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          make install
          
      - name: Set PYTHON and PIP variables for compiled Python
        if: matrix.python == ''
        run: |
          echo "PYTHON=$PYTHON_INSTALL_DIR/bin/python3" >> $GITHUB_ENV
          echo "PIP=$PYTHON_INSTALL_DIR/bin/pip3" >> $GITHUB_ENV
  
      - name: Run Python
        run: |
          "${PYTHON}" helloworld.py
          
      - name: Install PyInstaller and StaticX
        run: | 
          "${PIP}" install pyinstaller
          "${PIP}" install patchelf-wrapper
          "${PIP}" install staticx
 
      - name: Compile helloworld with PyInstaller
        run: |
          "${PYTHON}" -m PyInstaller -F helloworld.py
          
      - name: Run PyInstaller-compiled helloworld
        run: |
          dist/helloworld
          
      - name: Make Static helloworld
        run: |
          "${PYTHON}" -m staticx --loglevel DEBUG dist/helloworld dist/helloworld-staticx
          
      - name: Run StaticX-ed helloworld
        run: |
          dist/helloworld-staticx

      - name: Archive artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: helloworld-binaries-{{ matrix.mid }}
          path: dist/helloworld*
          
