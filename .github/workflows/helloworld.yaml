name: Build and test

on:
  push:
  pull_request:
  schedule:
    - cron: '37 22 * * *'

defaults:
  run:
    shell: bash
    working-directory: src

env:
  OPENSSL_CONFIG_OPTS: no-fips
  OPENSSL_INSTALL_PATH: ${{ github.workspace }}/bin/ssl
  OPENSSL_SOURCE_PATH: ${{ github.workspace }}/src/openssl
  PYTHON_INSTALL_PATH: ${{ github.workspace }}/bin/python
  PYTHON_SOURCE_PATH: ${{ github.workspace }}/src/cpython

jobs:
  py:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        goal: [build, pyorg, gha]
        pyver: [3.10.8]
        pyi_ver: [5.3, 5.4, 5.6.1]
        arch: [Win64]
        openssl_archs: [VC-WIN64A]
        
    steps:

      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Cache multiple paths
        if: matrix.goal == 'build'
        uses: actions/cache@v3
        id: cache-python-ssl
        with:
          path: |
            bin.tar.xz
            src.tar.xz
          key: gam-${{ matrix.jid }}-20221027-02

      - name: Untar Cache archives
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit == 'true'
        working-directory: ${{ github.workspace }}
        run: |
          tar xvvf bin.tar.xz
          tar xvvf src.tar.xz

      - name: Use pre-compiled Python for gha
        if: matrix.goal == 'gha'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}

      - name: Set env variables for gha
        if: matrix.goal == 'gha'
        env:
          ACTIONS_CACHE: ${{ steps.cache-python-ssl.outputs.cache-hit }}
          ACTIONS_GOAL: ${{ matrix.goal }}
          pyi_ver: ${{ matrix.pyi_ver }}
        run: |
             export PYTHON=$(which python3)
             export PIP=$(which pip3)
             export gam="${PYTHON} -m gam"
             export gampath="$(readlink -e .)"
             echo -e "PYTHON: ${PYTHON}\nPIP: ${PIP}\gam: ${gam}\ngampath: ${gampath}"
             echo "PYTHON=${PYTHON}" >> $GITHUB_ENV
             echo "PIP=${PIP}" >> $GITHUB_ENV
             echo "pyi_ver=${pyi_ver}" >> $GITHUB_ENV
             echo "gam=${gam}" >> $GITHUB_ENV
             echo "gampath=${gampath}" >> $GITHUB_ENV
             echo "JID=${JID}" >> $GITHUB_ENV
             echo "ACTIONS_CACHE=${ACTIONS_CACHE}" >> $GITHUB_ENV
             echo "ACTIONS_GOAL=${ACTIONS_GOAL}" >> $GITHUB_ENV

      - name: Install Python.org
        if: matrix.goal == 'pyorg'
        env:
          pyver: ${{ matrix.pyver }}
        run: |
          Write-Output "py_arch: $py_arch"
          Set-Variable -name python_file -value "python-${Env:pyver}-amd64.exe"
          Write-Output "python_file: $python_file"
          Set-Variable -name python_url -value "https://www.python.org/ftp/python/${Env:pyver}/${python_file}"
          Write-Output "python_url: $python_url"
          Invoke-WebRequest -Uri $python_url -OutFile $python_file
          Start-Process -wait -FilePath $python_file -ArgumentList "/quiet","InstallAllUsers=0","TargetDir=c:\\python","AssociateFiles=1","PrependPath=1"

      - name: MacOS install tools
        if: runner.os == 'macOS'
        run: |
          # Install latest Rust
          curl -fsS -o rust.sh https://sh.rustup.rs
          bash ./rust.sh -y
          source $HOME/.cargo/env
          # needed for Rust to compile cryptography Python package for universal2
          rustup target add aarch64-apple-darwin

      - name: Windows Configure VCode
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        with:
          arch: ${{ matrix.arch }}

      - name: Set Env Variables for build
        if: matrix.goal == 'build'
        env:
          arch: ${{ matrix.arch }}
          openssl_archs: ${{ matrix.openssl_archs }}
          pyver: ${{ matrix.pyver }}
          pyi_ver: ${{ matrix.pyi_ver }}
        run: |
          echo "We are running on ${RUNNER_OS}"
          LD_LIBRARY_PATH="${OPENSSL_INSTALL_PATH}/lib:${PYTHON_INSTALL_PATH}/lib"
          if [[ "${arch}" == "Win64" ]]; then
            PYEXTERNALS_PATH="amd64"
            PYBUILDRELEASE_ARCH="x64"
            GAM_ARCHIVE_ARCH="x86_64"
            WIX_ARCH="x64"
            CHOC_OPS=""
          elif [[ "${arch}" == "Win32" ]]; then
            PYEXTERNALS_PATH="win32"
            PYBUILDRELEASE_ARCH="Win32"
            GAM_ARCHIVE_ARCH="x86"
            WIX_ARCH="x86"
            CHOC_OPS="--forcex86"
          fi
          if [[ "${RUNNER_OS}" == "macOS" ]]; then
            #brew install coreutils
            #brew install bash
            MAKE=make
            MAKEOPT="-j$(sysctl -n hw.logicalcpu)"
            PERL=perl
            echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
            echo "PYTHON=${PYTHON_INSTALL_PATH}/bin/python3" >> $GITHUB_ENV
            echo "PIP_ARGS=--no-binary=:all:" >> $GITHUB_ENV
          elif [[ "${RUNNER_OS}" == "Linux" ]]; then
            MAKE=make
            MAKEOPT="-j$(nproc)"
            PERL=perl
            echo "PYTHON=${PYTHON_INSTALL_PATH}/bin/python3" >> $GITHUB_ENV
          elif [[ "${RUNNER_OS}" == "Windows" ]]; then
            MAKE=nmake
            MAKEOPT=""
            PERL="c:\strawberry\perl\bin\perl.exe"
            LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${PYTHON_SOURCE_PATH}/PCbuild/${PYEXTERNALS_PATH}"
            echo "PYTHON=${PYTHON_SOURCE_PATH}/PCbuild/${PYEXTERNALS_PATH}/python.exe" >> $GITHUB_ENV
            echo "GAM_ARCHIVE_ARCH=${GAM_ARCHIVE_ARCH}" >> $GITHUB_ENV
            echo "WIX_ARCH=${WIX_ARCH}" >> $GITHUB_ENV
          fi
          echo "We'll run make with: ${MAKEOPT}"
          echo "arch=${arch}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          echo "MAKE=${MAKE}" >> $GITHUB_ENV
          echo "MAKEOPT=${MAKEOPT}" >> $GITHUB_ENV
          echo "PERL=${PERL}" >> $GITHUB_ENV
          echo "pyver=${pyver}" >> $GITHUB_ENV
          echo "pyi_ver=${pyi_ver}" >> $GITHUB_ENV
          echo "PYEXTERNALS_PATH=${PYEXTERNALS_PATH}" >> $GITHUB_ENV
          echo "PYBUILDRELEASE_ARCH=${PYBUILDRELEASE_ARCH}" >> $GITHUB_ENV
          echo "openssl_archs=${openssl_archs}" >> $GITHUB_ENV

      - name: Windows NASM Install
        uses: ilammy/setup-nasm@v1
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'

      - name: Rename GNU link on Windows
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: bash
        run: mv /usr/bin/link /usr/bin/gnulink

      - name: Get latest stable Python source
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${GITHUB_WORKSPACE}/src"
          git clone https://github.com/python/cpython.git
          cd "${PYTHON_SOURCE_PATH}"
          export LATEST_STABLE_TAG="v${pyver}"
          echo "Using Python ${LATEST_STABLE_TAG}"
          git checkout "${LATEST_STABLE_TAG}"
          export COMPILED_PYTHON_VERSION=${LATEST_STABLE_TAG:1} # Trim the "v" prefix
          echo "COMPILED_PYTHON_VERSION=${COMPILED_PYTHON_VERSION}" >> $GITHUB_ENV

      - name: Mac/Linux Configure Python
        if: matrix.goal == 'build' && runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          if [[ "${RUNNER_OS}" == "macOS" ]]; then
            extra_args=( "--enable-universalsdk" "--with-universal-archs=universal2" )
          else
            extra_args=( )
          fi
          ./configure --with-openssl="${OPENSSL_INSTALL_PATH}" \
                      --prefix="${PYTHON_INSTALL_PATH}" \
                      --enable-shared \
                      --with-ensurepip=upgrade \
                      --enable-optimizations \
                      --with-lto \
                      "${extra_args[@]}"

      - name: Windows Get External Python deps
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          PCBuild\get_externals.bat

      - name: Windows Install sphinx-build
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          pip install --upgrade pip
          pip install --upgrade sphinx
          sphinx-build --version

      - name: Windows Config/Build Python
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          echo "Building for ${env:PYBUILDRELEASE_ARCH}..."
          PCBuild\build.bat -m --pgo -c Release -p "${env:PYBUILDRELEASE_ARCH}"

      - name: Mac/Linux Build Python
        if: matrix.goal == 'build' && runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          echo "Running: ${MAKE} ${MAKEOPT}"
          $MAKE $MAKEOPT

      - name: Mac/Linux Install Python
        if: matrix.goal == 'build' && runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          $MAKE altinstall
          $MAKE bininstall
          export PATH="${PATH}:${PYTHON_INSTALL_PATH}/bin"
          echo "PATH=${PATH}" >> $GITHUB_ENV
          echo "PATH: ${PATH}"

      - name: Run Python
        run: |
          "${PYTHON}" -V

      - name: Upgrade pip, wheel, etc
        run: |
          curl -O https://bootstrap.pypa.io/get-pip.py
          "${PYTHON}" get-pip.py
          "${PYTHON}" -m pip install --upgrade pip
          "${PYTHON}" -m pip install --upgrade wheel
          "${PYTHON}" -m pip install --upgrade setuptools

      - name: Install pip requirements
        run: |
             "${PYTHON}" -m pip install --upgrade --force cryptography
             "${PYTHON}" -m pip install --upgrade --force -r requirements.txt ${PIP_ARGS}
             "${PYTHON}" -m pip list

      - name: Install PyInstaller
        run: |
          "${PYTHON}" -m pip install --upgrade --force "pyinstaller==${pyi_ver}"

      - name: Build GAM with PyInstaller
        if: matrix.goal != 'test'
        run: |
             export gampath="./dist/gam"
             mkdir -p -v "${gampath}"
             if [[ "${RUNNER_OS}" == "macOS" ]]; then
               export gampath=$($PYTHON -c "import os; print(os.path.realpath('$gampath'))")
             else
               export gampath=$(realpath "${gampath}")
             fi
             export gam="${gampath}/helloworld/helloworld"
             echo "gampath=${gampath}" >> $GITHUB_ENV
             echo "gam=${gam}" >> $GITHUB_ENV
             echo -e "GAM: ${gam}\nGAMPATH: ${gampath}"
             "${PYTHON}" -m PyInstaller --clean --distpath="${gampath}" -y --log-level=DEBUG --debug=all helloworld.py
             echo "FILES"
             ls -alRF dist/

      - name: Basic Tests all jobs
        run: |
             $gam version extended

      - name: Tar Cache archive
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: |
          tar cJvvf bin.tar.xz bin/
          tar cJvvf src.tar.xz src/cpython
