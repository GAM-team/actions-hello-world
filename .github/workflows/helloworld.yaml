name: GitHub Actions Hello World

on: [push, pull_request]

defaults:
  run:
    shell: bash

env:
  OPENSSL_CONFIG_OPTS: no-asm no-fips
  OPENSSL_INSTALL_PATH: ${{ github.workspace }}/ssl
  OPENSSL_SOURCE_PATH: ${{ github.workspace }}/openssl
  PYTHON_INSTALL_PATH: ${{ github.workspace }}/python
  PYTHON_SOURCE_PATH: ${{ github.workspace }}/cpython
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            jid: 0
            arch: x86_64
          - os: macos-11
            jid: 1
            arch: x86_64
          - os: windows-2022
            jid: 2
            arch: Win64
          - os: windows-2022
            jid: 3
            arch: Win32
          - os: [self-hosted, linux, arm64]
            jid: 4
            arch: aarch64
          - os: [self-hosted, linux, arm]
            jid: 5
            arch: armv7l

    steps:
      - uses: actions/checkout@master
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Cache Python build
        id: cache-python
        uses: actions/cache@v2
        with:
          path: |
            ./python
            ./ssl
          key: ${{ matrix.jid }}-20220120

      - name: Set Env Variables
        env:
          arch: ${{ matrix.arch }}
          jid: ${{ matrix.jid }}
        run: |
          echo "We are running on ${RUNNER_OS}"
          if [[ "${RUNNER_OS}" == "macOS" ]]; then
            MAKE=make
            MAKEOPT="-j$(sysctl -n hw.logicalcpu)"
            PERL=perl
            # We only care about non-deprecated OSes
            MACOSX_DEPLOYMENT_TARGET="10.15"
            echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}" >> $GITHUB_ENV
          elif [[ "${RUNNER_OS}" == "Linux" ]]; then
            MAKE=make
            MAKEOPT="-j$(nproc)"
            PERL=perl
          elif [[ "${RUNNER_OS}" == "Windows" ]]; then
            MAKE=nmake
            MAKEOPT=""
            PERL="c:\strawberry\perl\bin\perl.exe"
          fi
          if [[ "${arch}" == "Win64" ]]; then
            PYEXTERNALS_PATH="amd64"
            PYBUILDRELEASE_ARCH="x64"
            OPENSSL_CONFIG_TARGET="VC-WIN64A"
          elif [[ "${arch}" == "Win32" ]]; then
            PYEXTERNALS_PATH="win32"
            PYBUILDRELEASE_ARCH="Win32"
            OPENSSL_CONFIG_TARGET="VC-WIN32"
          fi
          echo "We'll run make with: ${MAKEOPT}"
          echo "jid=${jid}" >> $GITHUB_ENV
          echo "arch=${arch}" >> $GITHUB_ENV
          echo "MAKE=${MAKE}" >> $GITHUB_ENV
          echo "MAKEOPT=${MAKEOPT}" >> $GITHUB_ENV
          echo "PERL=${PERL}" >> $GITHUB_ENV
          echo "PYEXTERNALS_PATH=${PYEXTERNALS_PATH}" >> $GITHUB_ENV
          echo "PYBUILDRELEASE_ARCH=${PYBUILDRELEASE_ARCH}" >> $GITHUB_ENV
          echo "OPENSSL_CONFIG_TARGET=${OPENSSL_CONFIG_TARGET}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${OPENSSL_INSTALL_PATH}/lib:${PYTHON_INSTALL_PATH}/lib" >> $GITHUB_ENV
          echo "PYTHON=${PYTHON_INSTALL_PATH}/bin/python3" >> $GITHUB_ENV

      - name: Get latest stable OpenSSL source
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/openssl/openssl.git
          cd "${OPENSSL_SOURCE_PATH}"
          export LATEST_STABLE_TAG=$(git tag --list openssl-* | grep -v alpha | grep -v beta | sort -Vr | head -n1)
          echo "Checking out version ${LATEST_STABLE_TAG}"
          git checkout "${LATEST_STABLE_TAG}"
          export COMPILED_OPENSSL_VERSION=${LATEST_STABLE_TAG:8} # Trim the openssl- prefix
          echo "COMPILED_OPENSSL_VERSION=${COMPILED_OPENSSL_VERSION}" >> $GITHUB_ENV

      - name: Windows Configure VCode
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        with:
          arch: ${{ matrix.arch }}

      - name: Windows NASM Install
        uses: ilammy/setup-nasm@v1
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'

      - name: Config OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          # --libdir=lib is needed so Python can find OpenSSL libraries
          "${PERL}" ./Configure "${OPENSSL_CONFIG_TARGET}" --libdir=lib --prefix="${OPENSSL_INSTALL_PATH}" $OPENSSL_CONFIG_OPTS

      - name: Rename GNU link on Windows
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: bash
        run: mv /usr/bin/link /usr/bin/gnulink

      - name: Make OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          $MAKE "${MAKEOPT}"

      - name: Install OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          # install_sw saves us ages processing man pages :-)
          $MAKE install_sw

      - name: Run OpenSSL
        run: |
          "${OPENSSL_INSTALL_PATH}/bin/openssl" version

      - name: Get latest stable Python source
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/python/cpython.git
          cd "${PYTHON_SOURCE_PATH}"
          export LATEST_STABLE_TAG=$(git tag --list | grep -v a | grep -v rc | grep -v b | sort -Vr | head -n1)
          git checkout "${LATEST_STABLE_TAG}"
          export COMPILED_PYTHON_VERSION=${LATEST_STABLE_TAG:1} # Trim the "v" prefix
          echo "COMPILED_PYTHON_VERSION=${COMPILED_PYTHON_VERSION}" >> $GITHUB_ENV

      - name: Mac/Linux Configure Python
        if: matrix.os != 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          ./configure --with-openssl="${OPENSSL_INSTALL_PATH}" \
                      --prefix="${PYTHON_INSTALL_PATH}" \
                      --enable-shared \
                      --with-ensurepip=upgrade \
                      --enable-optimizations \
                      --with-lto

      - name: Windows Get External Python deps
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          PCBuild\get_externals.bat

      - name: Windows overwrite external OpenSSL with local
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          $env:OPENSSL_EXT_PATH = "$(Get-Item externals\openssl-bin-* | Select -exp FullName)\"
          echo "External OpenSSL was downloaded to ${env:OPENSSL_EXT_PATH}"
          Remove-Item -recurse -force "${env:OPENSSL_EXT_PATH}*"
          # Emulate what this script does:
          # https://github.com/python/cpython/blob/main/PCbuild/openssl.vcxproj
          $env:OPENSSL_EXT_TARGET_PATH = "${env:OPENSSL_EXT_PATH}${env:PYEXTERNALS_PATH}"
          echo "Copying our OpenSSL to ${env:OPENSSL_EXT_TARGET_PATH}"
          mkdir "${env:OPENSSL_EXT_TARGET_PATH}\include\openssl\"
          Copy-Item -Path "${env:OPENSSL_SOURCE_PATH}\LICENSE.txt" -Destination "${env:OPENSSL_EXT_TARGET_PATH}\LICENSE"
          cp "$env:OPENSSL_INSTALL_PATH\lib\*" "${env:OPENSSL_EXT_TARGET_PATH}"
          cp "$env:OPENSSL_INSTALL_PATH\bin\*" "${env:OPENSSL_EXT_TARGET_PATH}"
          cp "$env:OPENSSL_INSTALL_PATH\include\openssl\*" "${env:OPENSSL_EXT_TARGET_PATH}\include\openssl\"
          cp "$env:OPENSSL_INSTALL_PATH\include\openssl\applink.c" "${env:OPENSSL_EXT_TARGET_PATH}\include\"

      - name: Windows Install sphinx-build
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          pip install --upgrade pip
          pip install --upgrade sphinx
          sphinx-build --version

      - name: Windows Config/Build Python
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          # We need out custom openssl.props which uses OpenSSL 3 DLL names
          Copy-Item -Path "${env:GITHUB_WORKSPACE}\openssl.props" -Destination PCBuild\
          echo "Building for ${env:PYBUILDRELEASE_ARCH}..."
          PCBuild\build.bat -m --pgo -c Release -p "${env:PYBUILDRELEASE_ARCH}"
          
      - name: Windows Install Python
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          mkdir "${env:PYTHON_INSTALL_PATH}\lib"
          Copy-Item -Path "PCBuild\${env:PYEXTERNALS_PATH}\*" "${env:PYTHON_INSTALL_PATH}\"
          Copy-Item -Path "${env:PYTHON_SOURCE_PATH}\Lib\*" "${env:PYTHON_INSTALL_PATH}\lib\" -recurse

      - name: Mac/Linux Build Python
        if: matrix.os != 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          echo "Running: ${MAKE} ${MAKEOPT}"
          $MAKE $MAKEOPT
          
      - name: Mac/Linux Install Python
        if: matrix.os != 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          $MAKE altinstall
          $MAKE bininstall

      - name: Run Python
        run: |
          "${PYTHON}" helloworld.py

      - name: Upgrade pip, wheel, etc
        run: |
          curl -O https://bootstrap.pypa.io/get-pip.py
          "${PYTHON}" get-pip.py
          "${PYTHON}" -m pip install --upgrade pip
          "${PYTHON}" -m pip install --upgrade wheel
          "${PYTHON}" -m pip install --upgrade setuptools

      - name: Build and Install PyInstaller
        run: |
             git clone https://github.com/pyinstaller/pyinstaller.git
             cd pyinstaller
             export latest_release=$(git tag --list | grep -v dev | grep -v rc | sort -Vr | head -n1)
             git checkout "${latest_release}"
             # remove pre-compiled bootloaders so we fail if bootloader compile fails
             rm -rf PyInstaller/bootloader/*-*/*
             cd bootloader
             if [[ "${arch}" == "win32" ]]; then
               export PYINSTALLER_BUILD_ARGS="--target-arch=32bit"
             fi
             echo "PyInstaller build arguments: ${PYINSTALLER_BUILD_ARGS}"
             "${PYTHON}" ./waf all $PYINSTALLER_BUILD_ARGS
             cd ..
             "${PYTHON}" -m pip install .

      - name: Compile helloworld with PyInstaller
        run: |
          "${PYTHON}" -OO -m PyInstaller -D helloworld.py
          ls -l dist/
          
      - name: Run PyInstaller-compiled helloworld
        run: dist/helloworld/helloworld

      - name: Check Python / OpenSSL version matches
        run: |
          export voutput=$(dist/helloworld/helloworld)
          export python_line=$(echo -e "${voutput}" | grep "Python: ")
          export python_arr=($python_line)
          export this_python=${python_arr[1]}
          if [[ "${this_python}" != "${COMPILED_PYTHON_VERSION}" ]]; then
            echo "ERROR: Tried to compile Python ${COMPILED_PYTHON_VERSION} but ended up with ${this_python}"
            exit 1
          fi
          export openssl_line=$(echo -e "${voutput}" | grep "OpenSSL: ")
          export openssl_arr=($openssl_line)
          export this_openssl=${openssl_arr[2]}
          if [[ "${this_openssl}" != "${COMPILED_OPENSSL_VERSION}" ]]; then
            echo "ERROR: Tried to compile OpenSSL ${COMPILED_OPENSSL_VERSION} but ended up with ${this_openssl}"
            exit 1
          fi
          echo "We successfully compiled Python ${this_python} and OpenSSL ${this_openssl}"

      - name: Linux install patchelf/staticx
        if: matrix.os == 'ubuntu-20.04'
        run: |
          "${PYTHON}" -m pip install --upgrade patchelf-wrapper
          "${PYTHON}" -m pip install --upgrade staticx

      - name: Linux Make Static helloworld
        if: matrix.os == 'ubuntu-20.04'
        run: |
          "${PYTHON}" -m staticx dist/helloworld/helloworld dist/helloworld/helloworld-staticx
          
      - name: Linux Run StaticX-ed helloworld
        if: matrix.os == 'ubuntu-20.04'
        run: |
          # dist/helloworld/helloworld-staticx
          uname

      - name: Archive helloworld binary
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: helloworld-binaries-${{ matrix.jid }}
          path: dist/helloworld/*

      - name: Archive compiled python
        if: steps.cache-python.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: python-${{ matrix.jid }}
          path: python/**
