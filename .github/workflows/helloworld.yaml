name: GitHub Actions Hello World

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            jid: 0
          - os: macos-10.15
            jid: 1
          #- os: windows-2022
          #  jid: 2
          #  buildbits: 64
          #  vc_arch: win64
          - os: windows-2022
            jid: 3
            buildbits: 32
            vc_arch: win32
          - os: [self-hosted, linux, arm64]
            jid: 4
          - os: [self-hosted, linux, arm]
            jid: 5

    steps:
      - uses: actions/checkout@master
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Cache Python build
        id: cache-python
        uses: actions/cache@v2
        with:
          path: |
            ./python
            ./ssl
          key: ${{ matrix.jid }}-20220117-02

      - name: Bash Env Variables
        env:
          buildbits: ${{ matrix.buildbits }}
          jid: ${{ matrix.jid }}
        run: |
          OPENSSL_INSTALL_DIR="${GITHUB_WORKSPACE}/ssl"
          OPENSSL_SOURCE_DIR="${GITHUB_WORKSPACE}/openssl"
          PYTHON_INSTALL_DIR="${GITHUB_WORKSPACE}/python"
          PYTHON_SOURCE_DIR="${GITHUB_WORKSPACE}/cpython"
          BUILDOS=$(uname)
          echo "We are running on ${BUILDOS}"
          if [[ "${BUILDOS}" == "Darwin" ]]; then
            MAKE=make
            MAKEOPT="-j$(sysctl -n hw.logicalcpu)"
          elif [[ "${BUILDOS}" == "Linux" ]]; then
            MAKE=make
            MAKEOPT="-j$(nproc)"
          else
            BUILDOS="Windows"
            MAKE=nmake
            MAKEOPT=""
          fi
          if [[ "${buildbits}" == "64" ]]; then
            PYEXTERNALS_PATH="amd64"
            PYBUILDRELEASE_ARCH="x64"
            CHOCO_OPTS=""
            OPENSSL_CONFIG_TARGET="VC-WIN64A"
          else
            PYEXTERNALS_PATH="win32"
            PYBUILDRELEASE_ARCH="win32"
            CHOCO_OPTS="--x86"
            OPENSSL_CONFIG_TARGET="VC-WIN32"
          fi
          echo "We'll run make with: ${MAKEOPT}"
          echo "BUILDOS=${BUILDOS}" >> $GITHUB_ENV
          echo "MAKE=${MAKE}" >> $GITHUB_ENV
          echo "MAKEOPT=${MAKEOPT}" >> $GITHUB_ENV
          echo "PYEXTERNALS_PATH=${PYEXTERNALS_PATH}" >> $GITHUB_ENV
          echo "PYBUILDRELEASE_ARCH=${PYBUILDRELEASE_ARCH}" >> $GITHUB_ENV
          echo "CHOCO_OPTS=${CHOCO_OPTS}" >> $GITHUB_ENV
          echo "OPENSSL_CONFIG_TARGET=${OPENSSL_CONFIG_TARGET}" >> $GITHUB_ENV
          echo "buildbits=${buildbits}" >> $GITHUB_ENV
          echo "jid=${jid}" >> $GITHUB_ENV
          echo "OPENSSL_SOURCE_DIR=${OPENSSL_SOURCE_DIR}" >> $GITHUB_ENV
          echo "OPENSSL_INSTALL_DIR=${OPENSSL_INSTALL_DIR}" >> $GITHUB_ENV
          echo "PYTHON_SOURCE_DIR=${PYTHON_SOURCE_DIR}" >> $GITHUB_ENV
          echo "PYTHON_INSTALL_DIR=${PYTHON_INSTALL_DIR}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${OPENSSL_INSTALL_DIR}/lib:${PYTHON_INSTALL_DIR}/lib" >> $GITHUB_ENV
          echo "PYTHON=${PYTHON_INSTALL_DIR}/bin/python3" >> $GITHUB_ENV

      - name: PowerShell Env Variables
        if: matrix.os == 'windows-2022'
        shell: powershell
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value "PS_OPENSSL_INSTALL_DIR=$env:GITHUB_WORKSPACE\ssl"
          Add-Content -Path $env:GITHUB_ENV -Value "PS_OPENSSL_SOURCE_DIR=$env:GITHUB_WORKSPACE\openssl"
          Add-Content -Path $env:GITHUB_ENV -Value "PS_PYTHON_INSTALL_DIR=$env:GITHUB_WORKSPACE\python"
          Add-Content -Path $env:GITHUB_ENV -Value "PS_PYTHON_SOURCE_DIR=$env:GITHUB_WORKSPACE\cpython"
          Add-Content -Path $env:GITHUB_ENV -Value "PYTHON=$env:PYTHON_SOURCE_DIR/release/amd64/binaries/python.exe"

      - name: Get latest stable OpenSSL source
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/openssl/openssl.git
          cd openssl
          export latest_stable=$(git tag --list openssl-* | grep -v alpha | grep -v beta | sort -Vr | head -n1)
          git checkout "${latest_stable}"

      - name: Unix Config OpenSSL
        if: matrix.os != 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          ./Configure --libdir=lib --prefix="${OPENSSL_INSTALL_DIR}" no-fips

      - name: Windows Perl Install
        if: matrix.os == 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        uses: shogo82148/actions-setup-perl@v1

      - name: Windows Configure VCode
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        with:
          arch: ${{ matrix.vc_arch }}

      - name: Windows NASM Install
        uses: ilammy/setup-nasm@v1
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        with:
          platform: ${{ matrix.vc_arch }}

      - name: Windows Config OpenSSL
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd $env:PS_OPENSSL_SOURCE_DIR
          perl ./Configure $env:OPENSSL_CONFIG_TARGET --prefix="$env:PS_OPENSSL_INSTALL_DIR" no-fips

      - name: Rename GNU link on Windows
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: bash
        run: mv /usr/bin/link /usr/bin/gnulink

      - name: Make OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          $MAKE "${MAKEOPT}"

      - name: Install OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          # install_sw saves us ages processing man pages :-)
          $MAKE install_sw

      - name: Run OpenSSL
        run: |
          "${OPENSSL_INSTALL_DIR}/bin/openssl" version

      - name: Get latest stable Python source
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/python/cpython.git
          cd cpython
          export latest_stable=$(git tag --list | grep -v a | grep -v rc | grep -v b | sort -Vr | head -n1)
          git checkout "${latest_stable}"

      - name: Mac/Linux Configure Python
        if: matrix.os != 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          ./configure --with-openssl="${OPENSSL_INSTALL_DIR}" \
                      --prefix="${PYTHON_INSTALL_DIR}" \
                      --enable-shared \
                      --with-ensurepip=upgrade \
                      --enable-optimizations \
                      --with-lto

      - name: Windows Config/Build/Install Python
        if: matrix.os == 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd $env:PS_PYTHON_SOURCE_DIR
          $env:BUILDERPYTHON = (gcm python).Path
          $env:BUILDERPIP = (gcm pip).Path
          $env:BUILDERPYTHONPATH = Resolve-Path -Path $env:BUILDERPYTHON\..
          echo "BUILDERPYTHONPATH: $env:BUILDERPYTHONPATH"
          Invoke-Expression "$env:BUILDERPYTHON -V"
          Invoke-Expression "$env:BUILDERPIP install --upgrade pip"
          Invoke-Expression "$env:BUILDERPIP install --upgrade sphinx"
          $env:SPHINXBUILD = (gcm sphinx-build).Path
          echo "Sphinx Build location: $env:SPHINXBUILD"
          Invoke-Expression "$env:SPHINXBUILD --version"
          Add-Content -Path $env:GITHUB_ENV -Value "SPHINXBUILD=${env:SPHINXBUILD}"
          #$env:DefaultWindowsSDKVersion = "10.0.20348.0"
          #echo "copy..."
          $env:OPENSSL_EXTERNAL_TARGET_DIR = "externals\openssl-bin-1.1.1m\${env:PYEXTERNALS_PATH}\"
          mkdir "${env:OPENSSL_EXTERNAL_TARGET_DIR}\include\openssl\"
          Copy-Item -Path "$env:PS_OPENSSL_INSTALL_DIR\lib\*" -Destination "${env:OPENSSL_EXTERNAL_TARGET_DIR}" -verbose -recurse
          copy-Item -Path "$env:PS_OPENSSL_INSTALL_DIR\bin\*" -Destination "${env:OPENSSL_EXTERNAL_TARGET_DIR}" -verbose -recurse
          echo "ls afterwards..."
          gci -r -Path "${env:OPENSSL_EXTERNAL_TARGET_DIR}" | select -exp FullName
          #echo "ssl/include"
          #gci -r -Path "$env:PS_OPENSSL_INSTALL_DIR/include" | select -exp FullName
          Copy-Item -Path "$env:PS_OPENSSL_INSTALL_DIR\include\openssl\*" -Destination "${env:OPENSSL_EXTERNAL_TARGET_DIR}\include\openssl\" -verbose -recurse
          Copy-Item -Path "$env:PS_OPENSSL_INSTALL_DIR\include\openssl\applink.c" -Destination "${env:OPENSSL_EXTERNAL_TARGET_DIR}\include\" -verbose
          echo "ALL OPENSSL"
          gci -r -Path "${env:OPENSSL_EXTERNAL_TARGET_DIR}\" | select -exp FullName
          Copy-Item -Path "${env:GITHUB_WORKSPACE}/openssl.props" -Destination PCBuild\ -verbose
          gci -r -Path PCBuild\ | select -exp FullName
          #PCBuild\get_externals.bat # should skip above OpenSSL
          PCBuild\build.bat -m --pgo -c Release -p "${env:PYBUILD_RELEASE_ARCH}"
          #Tools\msi\buildrelease.bat -$env:PYBUILDRELEASE_ARCH --out release --skip-msi --skip-nuget
          #echo "In release:"
          #dir release\
          #dir release\$env:PYEXTERNALS_PATH\
          #dir release\$env:PYEXTERNALS_PATH\binaries\
          mkdir $env:PS_PYTHON_INSTALL_DIR\
          #cp release\$env:PYEXTERNALS_PATH\binaries\* $env:PS_PYTHON_INSTALL_DIR
          Copy-Item -Path "PCBuild\${env:PYEXTERNALS_PATH}\*" $env:PS_PYTHON_INSTALL_DIR -verbose -recurse
          $env:PYTHON = "${env:PS_PYTHON_INSTALL_DIR}\python.exe"
          Add-Content -Path $env:GITHUB_ENV -Value "PYTHON=${env:PYTHON}"

      - name: Mac/Linux Build Python
        if: matrix.os != 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          $MAKE "${MAKEOPT}"
          
      - name: Mac/Linux Install Python
        if: matrix.os != 'windows-2022' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          $MAKE altinstall
          $MAKE bininstall

      - name: Run Python
        run: |
          "${PYTHON}" helloworld.py
          
      - name: Upgrade pip, wheel, etc
        run: |
          curl -O https://bootstrap.pypa.io/get-pip.py
          "${PYTHON}" get-pip.py
          "${PYTHON}" -m pip install --upgrade pip
          "${PYTHON}" -m pip install --upgrade wheel
          "${PYTHON}" -m pip install --upgrade setuptools

      - name: Build and Install PyInstaller
        run: |
             git clone https://github.com/pyinstaller/pyinstaller.git
             cd pyinstaller
             export latest_release=$(git tag --list | grep -v dev | grep -v rc | sort -Vr | head -n1)
             git checkout "${latest_release}"
             # remove pre-compiled bootloaders so we fail if bootloader compile fails
             rm -rf PyInstaller/bootloader/*-*/*
             cd bootloader
             export DefaultWindowsSDKVersion="10.0.20348.0"
             if [[ "${buildbits}" = "32" ]] && [[ "${BUILDOS}" == "Windows" ]]; then
               export PYINSTALLER_BUILD_ARGS="--target-arch=32bit"
             fi
             echo "Build arguments: ${PYINSTALLER_BUILD_ARGS}"
             "${PYTHON}" ./waf all "${PYINSTALLER_BUILD_ARGS}"
             cd ..
             "${PYTHON}" -m pip install .

      - name: Compile helloworld with PyInstaller
        run: |
          "${PYTHON}" -OO -m PyInstaller -F helloworld.py
          
      - name: Run PyInstaller-compiled helloworld
        run: dist/helloworld

      - name: Linux install patchelf/staticx
        if: matrix.os == 'ubuntu-20.04'
        run: |
          "${PYTHON}" -m pip install --upgrade patchelf-wrapper
          "${PYTHON}" -m pip install --upgrade staticx

      - name: Linux Make Static helloworld
        if: matrix.os == 'ubuntu-20.04'
        run: |
          "${PYTHON}" -m staticx dist/helloworld dist/helloworld-staticx
          
      - name: Linux Run StaticX-ed helloworld
        if: matrix.os == 'ubuntu-20.04'
        run: dist/helloworld-staticx

      - name: Archive artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: helloworld-binaries ${{ matrix.jid }}
          path: dist/helloworld*
