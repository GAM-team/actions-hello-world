name: GitHub Actions Hello World

on: [push, pull_request]

defaults:
  run:
    shell: bash

env:
  OPENSSL_VERSION: "3.0.0"
  PYTHON_VERSION: "3.10.0"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            mid: 1
          - os: macos-10.15
            mid: 2
          - os: windows-latest
            mid: 3

    steps:
      - uses: actions/checkout@master
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Cache Python build
        id: cache-python
        uses: actions/cache@v2
        if: matrix.python == ''
        with:
          path: |
            ~/python
            ~/ssl
          key: ${{ matrix.os }}-${{ matrix.mid }}-20211030

      - name: Set compiled Python/SSL env variables
        if: matrix.os == 'ubuntu-20.04'
        run: |
          echo "LD_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
          
      - name: Download OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          url="https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz"
          echo "Downloading ${url}..."
          curl -o openssl.tar.gz -s "${url}"

      - name: Extracting OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          tar xf openssl.tar.gz
          mv openssl-*/ openssl/

      - name: Unix Config OpenSSL
        if: matrix.os != 'windows-latest' && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          OPENSSL_INSTALL_DIR= "${HOME}/ssl"
          OPENSSL_SOURCE_DIR=~/openssl
          cd $OPENSSL_SOURCE_DIR
          echo "OPENSSL_SOURCE_DIR=${OPENSSL_SOURCE_DIR}" >> $GITHUB_ENV
          echo "OPENSSL_INSTALL_DIR=${OPENSSL_INSTALL_DIR}" >> $GITHUB_ENV
          echo "MAKE=make" >> $GITHUB_ENV
          ./Configure --libdir=lib --prefix="${OPENSSL_INSTALL_DIR}"

      - name: Windows Config OpenSSL
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install nasm
          cd ~
          New-Item -Path "~" -Name ssl -ItemType "directory"
          $env:OPENSSL_INSTALL_DIR = Resolve-Path -Path "$HOME/ssl"
          cd "openssl"
          $env:OPENSSL_SOURCE_DIR=$(pwd)
          $env:PATH="$ENV:PATH;c:\Program Files\NASM\"
          cmd /c 'call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat" && set MAKE=nmake && set > %temp%\vcvars.txt'
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
           if ($_ -match "^(.*?)=(.*)$") {
             Set-Content "env:\$($matches[1])" $matches[2]
             Add-Content -Path $env:GITHUB_ENV -Value "$($matches[1])=$($matches[2])"
           }
          }
          perl Configure VC-WIN64A shared --prefix="$env:OPENSSL_INSTALL_DIR"

      - name: Rename GNU link on Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
         mv /usr/bin/link /usr/bin/gnulink

      - name: Make OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          $MAKE -j$(nproc)

      - name: Install OpenSSL
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          sudo make install

      - name: Run OpenSSL
        run: |
          "${OPENSSL_INSTALL_DIR}/bin/openssl" version

      - name: Download Python
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          git clone https://github.com/python/cpython.git
          cd cpython
          git checkout 3.10
          PYTHON_SOURCE_DIR=$(pwd)
          echo "PYTHON_SOURCE_DIR=${PYTHON_SOURCE_DIR}" >> $GITHUB_ENV

      - name: Configure Python
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          ./configure --with-openssl-rpath=auto \
                      --with-openssl="/usr/local" \
                      --enable-shared \
                      --with-ensurepip=upgrade \
                      --enable-optimizations \
                      --with-lto

      - name: Build Python
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          make -j$(nproc)
          
      - name: Install Python
        if: matrix.python == ''  && steps.cache-python.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          sudo make install
          
      - name: Set PYTHON and PIP variables for compiled Python
        if: matrix.python == ''
        run: |
          echo "PYTHON=/usr/local/bin/python3" >> $GITHUB_ENV
          echo "PIP=/usr/local/bin/pip3" >> $GITHUB_ENV
  
      - name: Run Python
        run: |
          "${PYTHON}" helloworld.py
          
      - name: Install PyInstaller and StaticX
        run: |
          echo "Downloading PatchELF $PATCHELF_VERSION"
          PATCHELF_VERSION=0.13
          curl -O -L https://github.com/NixOS/patchelf/archive/$PATCHELF_VERSION.tar.gz 
          tar xf $PATCHELF_VERSION.tar.gz
          cd patchelf-$PATCHELF_VERSION/
          ./bootstrap.sh
          ./configure
          make
          sudo make install
          "${PIP}" install --upgrade pip
          "${PIP}" install --upgrade pyinstaller
          "${PIP}" install --upgrade staticx
 
      - name: Compile helloworld with PyInstaller
        run: |
          "${PYTHON}" -m PyInstaller -F helloworld.py
          
      - name: Run PyInstaller-compiled helloworld
        run: |
          dist/helloworld
          
      - name: Make Static helloworld
        if: matrix.os == 'ubuntu-20.04'
        run: |
          "${PYTHON}" -m staticx --loglevel DEBUG --debug dist/helloworld dist/helloworld-staticx
          
      - name: Run StaticX-ed helloworld
        if: matrix.os == 'ubuntu-20.04'
        run: |
          dist/helloworld-staticx

      - name: Archive artifacts
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: helloworld-binaries ${{ matrix.mid }}
          path: dist/helloworld*
          
